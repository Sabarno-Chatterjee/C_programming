* stdio. h — Standard input and output.

* int main() function
An int is a keyword that references an integer data type. An int data type used with the main() function that indicates the function should return an integer value. When we use an int main() function, it is compulsory to write return 0; statement at the end of the main() function.

Eg:

#include<stdio.h>

int main()
{
    printf("Hello World");

    return 0;
}


Syntax:

\t (Horizontal tab) – We use it to shift the cursor to a couple of spaces to the right in the same line.

\n is an escape sequence that denotes a newline character.


* VARIABLES

Creating a variable takes two steps:

(a) Declaration :

type variableName = value; Where type is one of C types (such as int ), and variableName is the name of the variable (such as x or myName). The equal sign is used to assign a value to the variable.

eg: 

int year;

(b) Initialisation: 


Variables are explicitly initialized if they are assigned a value in the declaration statement.


eg:

year = 2023

or it can be merged into one step;

int year = 2023;


* Common format specifiers:

%d - used for integers (int, short, long).
%f - used for floating-point numbers (float, double).
%c - used for a single character (char).
%s - used for strings of characters (char array).
%p - used for pointers.
%lf - used for double.


* In C, single quotes to denote a single character literal. If double quotes were used instead, it would create a string literal, which is an array of characters.

* "Double" is a data type in C that is used to represent floating-point numbers with double precision. It is used when higher precision is required than that provided by the "float" data type. It uses more memory, 8 bytes(64 bits of precision) instead of 4 bytes(32 bits of precision). 

* For using Boolean we need to include the "<stdbool.h>" library. 

# Unsigned:

- The unsigned keyword is used to declare a variable that can only store positive values or zero.
- It is used with integer data types (int, short, long) to indicate that the variable can only store non-negative values.
- When a variable is declared as unsigned, the sign bit, which represents the sign of the number, is not used to store the value of the variable.
- Instead, the bit that would have been used to store the sign is used to store the magnitude of the number.
- This allows unsigned variables to store larger positive values than their signed counterparts, but they cannot store negative numbers.
- For example, an unsigned int can store values between 0 and 4,294,967,295, while a signed int can store values between -2,147,483,648 and 2,147,483,647.

In summary, the unsigned keyword is a way to declare variables that can only store non-negative values. It is useful when you know that a variable will never need to store negative values, and allows you to store larger positive values than with a signed variable.


# In C, "short int", "int", and "long int" are all integer data types that are used to store whole numbers. Here are some differences between them:

Range of values:
"short int" can store values between -32,768 and 32,767.
"int" can store values between -32,768 and 32,767 (same as short int on most systems), or between -2,147,483,648 and 2,147,483,647 (same as long int on some systems).
"long int" can store values between -2,147,483,648 and 2,147,483,647.
Memory usage:
"short int" typically uses 2 bytes (16 bits) of memory.
"int" typically uses 2 or 4 bytes (16 or 32 bits) of memory, depending on the system.
"long int" typically uses 4 bytes (32 bits) of memory.
Performance:
On most systems, "int" is the most efficient data type to use, as it is the "natural" size of the machine's processor.
Using "short int" or "long int" may result in slower code, as the processor may need to perform extra operations to convert between the data type and the processor's "natural" size.
When to use each data type:
"short int" can be used when memory usage is a concern, and when the value being stored is within its range.
"int" is the most commonly used integer data type, and is appropriate for most situations.
"long int" should be used when the value being stored is outside the range of "int".


# Switch case statements:


Eg:

int main() {
    int number;
    printf("Enter a number (1-5): ");
    scanf("%d", &number);
    switch(number) {
        case 1:
            printf("I");
            break;
        case 2:
            printf("II");
            break;
        case 3:
            printf("III");
            break;
        case 4:
            printf("IV");
            break;
        case 5:
            printf("V");
            break;
        default:
            printf("Invalid number");
            break;
    }
    printf("\n");
    return 0;
}


The switch statement and the if-else statement are both used to make decisions in C, but they are used in different situations.

The switch statement is usually used when you have multiple conditions that depend on a single variable. The switch statement evaluates the value of the variable and executes the corresponding case statement. It's a cleaner and more concise way of writing code for multiple conditions.

On the other hand, the if-else statement is used when you have a single condition that needs to be evaluated. It can also be used for nested conditions when you have multiple conditions that depend on one another.


# <ctype.h>


ctype.h is a header file in C programming language that provides functions to determine the type of character that is being used. The functions in ctype.h are used to test whether a given character is a digit, letter, punctuation, whitespace, or other printable or non-printable character.

toupper is a function in ctype.h that is used to convert lowercase alphabetic characters to uppercase in C programming language. The function takes a character as an argument and returns the uppercase equivalent of that character if it is a lowercase alphabetic character. If the argument is not a lowercase alphabetic character, the function returns the argument without any changes.


* Arguments are what you are sending to a function.
* Parameters are what a function expects when it is invoked.



# Difference between while loop and do while loop:



In C programming, both while loop and do-while loop are used for repetitive execution of a block of code based on a condition. However, there are some key differences between the two:

1. Condition check: In a while loop, the condition is checked at the beginning of each iteration. If the condition is false, the loop will not execute at all. In contrast, a do-while loop checks the condition at the end of each iteration, which means that the loop will always execute at least once.

2. Syntax: The syntax for a while loop is: 

```
while (condition) {
    // code to be executed
}
```

The syntax for a do-while loop is:

```
do {
    // code to be executed
} while (condition);
```

3. Usage: While loops are commonly used when the number of iterations is not known in advance, and the loop should only execute if the condition is true. On the other hand, do-while loops are used when the loop should execute at least once, regardless of the condition.

4. Control Flow: In while loop, the control flow enters the loop body only if the test expression is true. In contrast, in a do-while loop, the control flow always enters the loop body at least once, even if the test expression is false.

Here's an example to illustrate the difference:

```
int i = 10;

while (i < 5) {
    printf("This code will not execute\n");
}

do {
    printf("This code will execute at least once\n");
} while (i < 5);
```

In the example above, the while loop will not execute at all because the condition is false. However, the do-while loop will execute at least once, regardless of the condition.
